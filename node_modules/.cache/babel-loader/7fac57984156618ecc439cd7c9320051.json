{"ast":null,"code":"var _jsxFileName = \"/Users/ikuzmin/romanosov/src/components/ButtonTypeD.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Overlay from 'react-bootstrap/Overlay';\nimport Popover from 'react-bootstrap/Popover';\nimport { sectors } from '../data/mainfilters/sectors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ButtonTypeD = chapters => {\n  _s();\n\n  const [show, setShow] = useState(false);\n  const [target, setTarget] = useState(null);\n  const ref = useRef(null);\n\n  const handleClick = event => {\n    setShow(!show);\n    setTarget(event.target);\n  };\n\n  const sectorsToColumns = [[0, 2], [2, 4], [4, 6], [6, 9]];\n\n  const addListItem = child => {\n    if (child) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sectors__sublist\",\n        children: child.map(a => {\n          sectorBlock(a.name, 'subitem');\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this);\n    }\n  };\n\n  const sectorBlock = (name, itemType, child) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'sectors__' + itemType,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sectors__titles\",\n        children: [\" \", name, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), addListItem(child)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this);\n  };\n\n  const scatterSectors = () => {\n    const slicedColumns = sectorsToColumns.map((key, i) => {\n      const sliced = sectors.list.slice(key[0], key[1]);\n      console.log(sliced);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sectors__column\",\n        id: i\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this);\n    });\n    console.log(slicedColumns);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleClick,\n      children: \"Filter Sectors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Overlay, {\n      show: show,\n      target: target,\n      placement: \"bottom\",\n      container: ref.current,\n      containerPadding: 20,\n      children: /*#__PURE__*/_jsxDEV(Popover, {\n        id: \"popover-contained\",\n        children: [/*#__PURE__*/_jsxDEV(Popover.Title, {\n          as: \"h3\",\n          children: \"Sectors\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Popover.Content, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sectors\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sectors__top\",\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                className: \"sectors__buttons\",\n                children: \"Select All\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                className: \"sectors__buttons\",\n                children: \"Deselect All\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sectors__columns\",\n              children: scatterSectors()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ButtonTypeD, \"OfrKQZFHDMYvzYxaNoaQ6QZZypI=\");\n\n_c = ButtonTypeD;\nexport default ButtonTypeD;\n\nvar _c;\n\n$RefreshReg$(_c, \"ButtonTypeD\");","map":{"version":3,"sources":["/Users/ikuzmin/romanosov/src/components/ButtonTypeD.js"],"names":["React","useState","useRef","Button","ButtonGroup","Overlay","Popover","sectors","ButtonTypeD","chapters","show","setShow","target","setTarget","ref","handleClick","event","sectorsToColumns","addListItem","child","map","a","sectorBlock","name","itemType","scatterSectors","slicedColumns","key","i","sliced","list","slice","console","log","current"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react'\nimport Button from 'react-bootstrap/Button'\n\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\n\nimport Overlay from 'react-bootstrap/Overlay'\nimport Popover from 'react-bootstrap/Popover'\n\nimport { sectors } from '../data/mainfilters/sectors'\n\n\nconst ButtonTypeD = ( chapters ) => {\n\n    const [show, setShow] = useState(false);\n  const [target, setTarget] = useState(null);\n  const ref = useRef(null);\n\n  const handleClick = (event) => {\n    setShow(!show);\n    setTarget(event.target);\n  };\n\n  const sectorsToColumns = [\n    [0, 2],\n    [2, 4],\n    [4, 6],\n    [6, 9]\n  ]\n\n  const addListItem = (child) => {\n    if(child) {\n      return (\n        <div className = \"sectors__sublist\">\n          {\n            child.map((a) => {\n              sectorBlock(a.name, 'subitem')\n            })\n          }\n        </div>\n    )}\n  }\n\n  const sectorBlock = (name, itemType, child ) => {\n    return (\n      <div className={ 'sectors__' + itemType }>\n        <input type=\"checkbox\"/>\n        <div className=\"sectors__titles\"> { name } </div>\n        { addListItem(child) }\n      </div>\n    )\n  }\n\n  const scatterSectors = () => {\n\n    const slicedColumns = sectorsToColumns.map((key, i) => {\n      const sliced = sectors.list.slice(key[0], key[1])\n\n      console.log(sliced)\n\n      return(\n        <div className = \"sectors__column\" id={ i }>\n          { /*\n            sliced.map((a) => {\n              return(\n                sectorBlock(a.name, 'block', a.child)\n              )\n            }\n)\n          */}\n        </div>\n      )\n    })\n\n    console.log( slicedColumns )\n  }\n\n  return (\n    <div ref={ref}>\n      <Button onClick={handleClick}>Filter Sectors</Button>\n\n      <Overlay\n        show={show}\n        target={target}\n        placement=\"bottom\"\n        container={ref.current}\n        containerPadding={20}\n      >\n        <Popover id=\"popover-contained\">\n          <Popover.Title as=\"h3\">Sectors</Popover.Title>\n          <Popover.Content>\n            <div className = 'sectors'>\n              <div className = 'sectors__top'>\n                <Button className = 'sectors__buttons'>Select All</Button>\n                <Button className = 'sectors__buttons'>Deselect All</Button>\n              </div>\n\n              <div className = 'sectors__columns'>\n               { scatterSectors() }\n              </div>\n            </div>\n          </Popover.Content>\n        </Popover>\n      </Overlay>\n    </div>\n  );\n\n    \n\n}\n\nexport default ButtonTypeD"]},"metadata":{},"sourceType":"module"}