{"ast":null,"code":"var _jsxFileName = \"/Users/ikuzmin/romanosov/src/components/ButtonTypeD.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Overlay from 'react-bootstrap/Overlay';\nimport Popover from 'react-bootstrap/Popover';\nimport { sectors } from '../data/mainfilters/sectors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ButtonTypeD = chapters => {\n  _s();\n\n  const [show, setShow] = useState(false);\n  const [target, setTarget] = useState(null);\n  const ref = useRef(null);\n\n  const handleClick = event => {\n    setShow(!show);\n    setTarget(event.target);\n  };\n\n  const sectorsToColumns = [[0, 2], [2, 4], [4, 6], [6, 9]];\n\n  const addListItem = child => {\n    const sublist = () => {\n      const __sublist = child.map(a => {\n        const l = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sectors__subitem\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sectors__titles\",\n            children: [\" \", a.name, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 9\n        }, this);\n\n        return l;\n      });\n\n      return __sublist;\n    };\n\n    if (child) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sectors__sublist\",\n        children: sublist()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this);\n    }\n  };\n\n  const sectorBlock = (name, itemType, child) => {\n    const item = v => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: 'sectors__' + v,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sectors__titles\",\n          children: [\" \", name, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }, this);\n    };\n\n    if (itemType === 'block') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sectors__block\",\n        children: [item('mainlevel'), addListItem(child)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }, this);\n    } else if (itemType === 'subitem') {\n      item(itemType);\n    }\n  };\n\n  const scatterSectors = () => {\n    const slicedColumns = sectorsToColumns.map((key, i) => {\n      const sliced = sectors.list.slice(key[0], key[1]);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sectors__column\",\n        id: i,\n        children: sliced.map(a => {\n          return sectorBlock(a.name, 'block', a.child);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this);\n    });\n    return slicedColumns;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleClick,\n      className: \"mainfilters__input--list filter\",\n      children: \"Filter Sectors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Overlay, {\n      show: show,\n      target: target,\n      placement: \"bottom\",\n      container: ref.current,\n      containerPadding: 20,\n      children: /*#__PURE__*/_jsxDEV(Popover, {\n        style: {\n          width: '1000px',\n          maxWidth: '1000px',\n          height: '500px'\n        },\n        id: \"popover-contained\",\n        children: [/*#__PURE__*/_jsxDEV(Popover.Title, {\n          as: \"h3\",\n          children: \"Sectors\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Popover.Content, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sectors\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sectors__top\",\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                className: \"sectors__buttons\",\n                children: \"Select All\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                className: \"sectors__buttons\",\n                children: \"Deselect All\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sectors__columns\",\n              children: scatterSectors()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ButtonTypeD, \"OfrKQZFHDMYvzYxaNoaQ6QZZypI=\");\n\n_c = ButtonTypeD;\nexport default ButtonTypeD;\n\nvar _c;\n\n$RefreshReg$(_c, \"ButtonTypeD\");","map":{"version":3,"sources":["/Users/ikuzmin/romanosov/src/components/ButtonTypeD.js"],"names":["React","useState","useRef","Button","Overlay","Popover","sectors","ButtonTypeD","chapters","show","setShow","target","setTarget","ref","handleClick","event","sectorsToColumns","addListItem","child","sublist","__sublist","map","a","l","name","sectorBlock","itemType","item","v","scatterSectors","slicedColumns","key","i","sliced","list","slice","current","width","maxWidth","height"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react'\nimport Button from 'react-bootstrap/Button'\n\nimport Overlay from 'react-bootstrap/Overlay'\nimport Popover from 'react-bootstrap/Popover'\n\nimport { sectors } from '../data/mainfilters/sectors'\n\n\nconst ButtonTypeD = ( chapters ) => {\n\n    const [show, setShow] = useState(false);\n  const [target, setTarget] = useState(null);\n  const ref = useRef(null);\n\n  const handleClick = (event) => {\n    setShow(!show);\n    setTarget(event.target);\n  };\n\n  const sectorsToColumns = [\n    [0, 2],\n    [2, 4],\n    [4, 6],\n    [6, 9]\n  ]\n\n  const addListItem = (child) => {\n\n    const sublist = () => {\n      const __sublist = child.map((a) => {\n\n        const l = (\n        <div className='sectors__subitem'>\n          <input type=\"checkbox\"/>\n          <div className=\"sectors__titles\"> { a.name } </div>\n        </div>\n        )\n        return l\n      })\n\n      return __sublist\n    }\n\n    \n\n    if(child) {\n      return (\n        <div className = \"sectors__sublist\">\n          { \n            sublist()\n          }\n        </div>\n    )}\n  }\n\n  const sectorBlock = (name, itemType, child ) => {\n\n    const item = (v) => { \n\n      return (\n      <div className={ 'sectors__' + v }>\n          <input type=\"checkbox\"/>\n          <div className=\"sectors__titles\"> { name } </div>\n      </div>\n    )\n  }\n\n    if(itemType === 'block') {\n    return (\n      <div className='sectors__block'>\n        { item('mainlevel') }\n        { addListItem(child) }\n      </div>\n    )\n    } else if(itemType === 'subitem') {\n      item(itemType)\n    }\n  }\n\n  const scatterSectors = () => {\n\n    const slicedColumns = sectorsToColumns.map((key, i) => {\n      const sliced = sectors.list.slice(key[0], key[1])\n\n      return(\n        <div className = \"sectors__column\" id={ i }>\n          {\n            sliced.map((a) => {\n              return(\n                sectorBlock(a.name, 'block', a.child)\n              )\n            }\n)\n          }\n        </div>\n      )\n    })\n\n    return ( slicedColumns )\n  }\n\n  return (\n    <div ref={ref}>\n      <Button onClick={handleClick} className=\"mainfilters__input--list filter\">Filter Sectors</Button>\n\n      <Overlay\n        show={show}\n        target={target}\n        placement=\"bottom\"\n        container={ref.current}\n        containerPadding={20}\n      >\n        <Popover style = {{width: '1000px', maxWidth: '1000px', height: '500px'}} id=\"popover-contained\">\n          <Popover.Title as=\"h3\">Sectors</Popover.Title>\n          <Popover.Content>\n            <div className = 'sectors'>\n              <div className = 'sectors__top'>\n                <Button className = 'sectors__buttons'>Select All</Button>\n                <Button className = 'sectors__buttons'>Deselect All</Button>\n              </div>\n\n              <div className = 'sectors__columns'>\n               { scatterSectors() }\n              </div>\n            </div>\n          </Popover.Content>\n        </Popover>\n      </Overlay>\n    </div>\n  );\n\n    \n\n}\n\nexport default ButtonTypeD"]},"metadata":{},"sourceType":"module"}