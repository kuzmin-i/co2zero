{"ast":null,"code":"var _jsxFileName = \"/Users/ikuzmin/romanosov/src/components/ButtonTypeA.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ButtonTypeA = chapters => {\n  _s();\n\n  const _chapters = chapters.chapters;\n  const [label, setLabel] = useState(_chapters[0].name);\n  return /*#__PURE__*/_jsxDEV(Dropdown, {\n    children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n      variant: \"success\",\n      id: \"dropdown-basic\",\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n      children: _chapters.map(key => {\n        const _name = key.child ? /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            marginLeft: '20px'\n          },\n          children: key.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 45\n        }, this) : /*#__PURE__*/_jsxDEV(\"b\", {\n          children: key.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 100\n        }, this);\n\n        let _button;\n\n        if (key.list) {\n          _button = /*#__PURE__*/_jsxDEV(Dropdown, {\n            as: ButtonGroup,\n            id: `dropdown-button-drop-right`,\n            drop: \"right\",\n            variant: \"secondary\",\n            title: `Drop right`,\n            children: [/*#__PURE__*/_jsxDEV(Dropdown.Item, {\n              eventKey: \"1\",\n              children: \"Action\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n              eventKey: \"2\",\n              children: \"Another action\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n              eventKey: \"3\",\n              children: \"Something else here\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown.Divider, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n              eventKey: \"4\",\n              children: \"Separated link\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 29\n            }, this)]\n          }, 'right', true, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 25\n          }, this);\n        } else {\n          _button = _name;\n        }\n\n        return /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n          onClick: () => setLabel(key.name),\n          href: \"#/action-1\",\n          children: _button\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ButtonTypeA, \"N2788RSqIKVWd0Sb6mtFRxxbJUw=\");\n\n_c = ButtonTypeA;\nexport default ButtonTypeA;\n\nvar _c;\n\n$RefreshReg$(_c, \"ButtonTypeA\");","map":{"version":3,"sources":["/Users/ikuzmin/romanosov/src/components/ButtonTypeA.js"],"names":["useState","Button","Dropdown","ButtonGroup","ButtonTypeA","chapters","_chapters","label","setLabel","name","map","key","_name","child","marginLeft","_button","list"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,QAAP,MAAqB,0BAArB;AAEA,OAAOC,WAAP,MAAwB,6BAAxB;;;AAGA,MAAMC,WAAW,GAAKC,QAAF,IAAgB;AAAA;;AAEhC,QAAMC,SAAS,GAAGD,QAAQ,CAACA,QAA3B;AAEA,QAAM,CAACE,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAACM,SAAS,CAAC,CAAD,CAAT,CAAaG,IAAd,CAAlC;AAEA,sBACI,QAAC,QAAD;AAAA,4BACA,QAAC,QAAD,CAAU,MAAV;AAAiB,MAAA,OAAO,EAAC,SAAzB;AAAmC,MAAA,EAAE,EAAC,gBAAtC;AAAA,gBACKF;AADL;AAAA;AAAA;AAAA;AAAA,YADA,eAKA,QAAC,QAAD,CAAU,IAAV;AAAA,gBACMD,SAAS,CAACI,GAAV,CAAcC,GAAG,IAAI;AAEnB,cAAMC,KAAK,GAAID,GAAG,CAACE,KAAL,gBAAc;AAAM,UAAA,KAAK,EAAE;AAACC,YAAAA,UAAU,EAAE;AAAb,WAAb;AAAA,oBAAoCH,GAAG,CAACF;AAAxC;AAAA;AAAA;AAAA;AAAA,gBAAd,gBAAqE;AAAA,oBAAIE,GAAG,CAACF;AAAR;AAAA;AAAA;AAAA;AAAA,gBAAnF;;AAEA,YAAIM,OAAJ;;AACA,YAAGJ,GAAG,CAACK,IAAP,EAAa;AACTD,UAAAA,OAAO,gBACH,QAAC,QAAD;AACI,YAAA,EAAE,EAAEZ,WADR;AAGI,YAAA,EAAE,EAAG,4BAHT;AAII,YAAA,IAAI,EAAC,OAJT;AAKI,YAAA,OAAO,EAAC,WALZ;AAMI,YAAA,KAAK,EAAG,YANZ;AAAA,oCAQI,QAAC,QAAD,CAAU,IAAV;AAAe,cAAA,QAAQ,EAAC,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBARJ,eASI,QAAC,QAAD,CAAU,IAAV;AAAe,cAAA,QAAQ,EAAC,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBATJ,eAUI,QAAC,QAAD,CAAU,IAAV;AAAe,cAAA,QAAQ,EAAC,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAVJ,eAWI,QAAC,QAAD,CAAU,OAAV;AAAA;AAAA;AAAA;AAAA,oBAXJ,eAYI,QAAC,QAAD,CAAU,IAAV;AAAe,cAAA,QAAQ,EAAC,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAZJ;AAAA,aAEQ,OAFR;AAAA;AAAA;AAAA;AAAA,kBADJ;AAeH,SAhBD,MAgBO;AACHY,UAAAA,OAAO,GAAGH,KAAV;AACH;;AAED,4BACA,QAAC,QAAD,CAAU,IAAV;AAAe,UAAA,OAAO,EAAK,MAAMJ,QAAQ,CAACG,GAAG,CAACF,IAAL,CAAzC;AAAsD,UAAA,IAAI,EAAC,YAA3D;AAAA,oBACQM;AADR;AAAA;AAAA;AAAA;AAAA,gBADA;AAMH,OA/BC;AADN;AAAA;AAAA;AAAA;AAAA,YALA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA8CH,CApDD;;GAAMX,W;;KAAAA,W;AAsDN,eAAeA,WAAf","sourcesContent":["import { useState } from 'react'\nimport Button from 'react-bootstrap/Button'\nimport Dropdown from 'react-bootstrap/Dropdown'\n\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\n\n\nconst ButtonTypeA = ( chapters ) => {\n\n    const _chapters = chapters.chapters\n\n    const [label, setLabel] = useState(_chapters[0].name)\n\n    return (\n        <Dropdown>\n        <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n            {label}\n        </Dropdown.Toggle>\n\n        <Dropdown.Menu>\n            { _chapters.map(key => {\n\n                const _name = (key.child) ? <span style={{marginLeft: '20px'}}>{key.name}</span> : <b>{key.name}</b>\n\n                let _button;\n                if(key.list) {\n                    _button =\n                        <Dropdown\n                            as={ButtonGroup}\n                            key='right'\n                            id={`dropdown-button-drop-right`}\n                            drop='right'\n                            variant=\"secondary\"\n                            title={`Drop right`}\n                        >\n                            <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\n                            <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n                            <Dropdown.Item eventKey=\"3\">Something else here</Dropdown.Item>\n                            <Dropdown.Divider />\n                            <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\n                        </Dropdown>\n                } else {\n                    _button = _name\n                }\n\n                return (\n                <Dropdown.Item onClick = { () => setLabel(key.name) } href=\"#/action-1\">{ \n                        _button\n                    }\n                </Dropdown.Item>\n                )\n            })\n         }\n        </Dropdown.Menu>\n        </Dropdown>\n    )\n\n    \n\n}\n\nexport default ButtonTypeA"]},"metadata":{},"sourceType":"module"}