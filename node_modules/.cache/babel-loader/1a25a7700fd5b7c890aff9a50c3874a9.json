{"ast":null,"code":"var _jsxFileName = \"/Users/ikuzmin/romanosov/src/components/ButtonTypeB.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ButtonTypeB = chapters => {\n  _s();\n\n  const _chapters = chapters.chapters.list;\n  const [label, setLabel] = useState(_chapters[0].name);\n\n  const RecursiveMenu = items => {\n    return items.map(key => {\n      const _name = key.child ? /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          marginLeft: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 80\n        }, this), key.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 45\n      }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 130\n        }, this), key.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 124\n      }, this);\n\n      let _button;\n\n      const CustomToggle = /*#__PURE__*/React.forwardRef(({\n        children,\n        onClick\n      }, ref) => {\n        return /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"dropdown-item dropdown-toggle\",\n          href: \"\",\n          ref: ref,\n          onMouseEnter: e => onClick(e),\n          onClick: e => {\n            e.preventDefault();\n            onClick(e);\n          },\n          children: children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 21\n        }, this);\n      });\n\n      if (key.list) {\n        _button = /*#__PURE__*/_jsxDEV(Dropdown, {\n          as: ButtonGroup,\n          id: `dropdown-button-drop-right`,\n          drop: \"right\",\n          variant: \"secondary\",\n          title: `Drop right`,\n          style: {\n            width: '100%'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n            id: \"dropdown-basic\",\n            as: CustomToggle,\n            children: _name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n            children: RecursiveMenu(key.list)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this)]\n        }, 'right', true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 25\n        }, this);\n      } else {\n        _button = /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n          onClick: e => {\n            e.preventDefault();\n          },\n          href: \"#/action-1\",\n          children: _name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }, this);\n      }\n\n      return _button;\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dropdown, {\n    children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n      variant: \"success\",\n      id: \"dropdown-basic\",\n      bsPrefix: \"mainfilters__input--list\",\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n      children: RecursiveMenu(_chapters)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ButtonTypeB, \"N2788RSqIKVWd0Sb6mtFRxxbJUw=\");\n\n_c = ButtonTypeB;\nexport default ButtonTypeB;\n\nvar _c;\n\n$RefreshReg$(_c, \"ButtonTypeB\");","map":{"version":3,"sources":["/Users/ikuzmin/romanosov/src/components/ButtonTypeB.js"],"names":["React","useState","Dropdown","ButtonGroup","ButtonTypeB","chapters","_chapters","list","label","setLabel","name","RecursiveMenu","items","map","key","_name","child","marginLeft","_button","CustomToggle","forwardRef","children","onClick","ref","e","preventDefault","width"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport Dropdown from 'react-bootstrap/Dropdown'\n\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\n\n\nconst ButtonTypeB = ( chapters ) => {\n\n    const _chapters = chapters.chapters.list\n\n    const [label, setLabel] = useState(_chapters[0].name)\n\n    const RecursiveMenu = (items) => {\n        \n        return (\n            items.map(key => {\n                const _name = (key.child) ? <span style={{marginLeft: '20px'}}><input type=\"checkbox\"/>{key.name}</span> : <span><input type=\"checkbox\"/>{key.name}</span>\n                \n                let _button;\n\n                const CustomToggle = React.forwardRef(({ children, onClick }, ref) => {\n                    return (\n                    <a\n                      className=\"dropdown-item dropdown-toggle\"\n                      href=\"\"\n                      ref={ref}\n                      onMouseEnter={(e) => onClick(e)}\n                      onClick={(e) => {\n                        e.preventDefault();\n                        onClick(e);\n                      }}\n                    >\n                      {children}\n                    </a>\n                  )\n                    });\n\n                if(key.list) {\n                    _button =\n                        <Dropdown\n                            as={ButtonGroup}\n                            key='right'\n                            id={`dropdown-button-drop-right`}\n                            drop='right'\n                            variant=\"secondary\"\n                            title={`Drop right`}\n                            style={{width: '100%'}}\n                        >\n                        <Dropdown.Toggle id=\"dropdown-basic\" as = {CustomToggle}>\n                            { _name }\n                        </Dropdown.Toggle>\n                        <Dropdown.Menu>\n                            {\n                                RecursiveMenu(key.list)\n                            }\n                        </Dropdown.Menu>\n                        </Dropdown>\n                } else {\n                    _button = (\n                        <Dropdown.Item onClick = { (e) => {\n                            e.preventDefault()\n                        } } href=\"#/action-1\">{_name}</Dropdown.Item>\n                    )\n                }\n\n                return _button\n\n            })\n        )\n    }\n\n    return (\n        <Dropdown>\n        <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\" bsPrefix=\"mainfilters__input--list\">\n            {label}\n        </Dropdown.Toggle>\n\n        <Dropdown.Menu>\n            { RecursiveMenu(_chapters) }\n        </Dropdown.Menu>\n        </Dropdown>\n    )\n\n    \n\n}\n\nexport default ButtonTypeB"]},"metadata":{},"sourceType":"module"}